// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: products.sql

package database

import (
	"context"
)

const getProductByID = `-- name: GetProductByID :one
SELECT id, category_id, name, description, price, stock_quantity, image_url,
       average_rating, total_comments, created_at, updated_at
FROM products
WHERE id = $1
`

func (q *Queries) GetProductByID(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.StockQuantity,
		&i.ImageUrl,
		&i.AverageRating,
		&i.TotalComments,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, category_id, name, description, price, stock_quantity, image_url,
       average_rating, total_comments, created_at, updated_at
FROM products
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListProductsParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.StockQuantity,
			&i.ImageUrl,
			&i.AverageRating,
			&i.TotalComments,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductsByCategory = `-- name: ListProductsByCategory :many
SELECT id, category_id, name, description, price, stock_quantity, image_url,
       average_rating, total_comments, created_at, updated_at
FROM products
WHERE category_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListProductsByCategoryParams struct {
	CategoryID int32 `db:"category_id" json:"category_id"`
	Limit      int32 `db:"limit" json:"limit"`
	Offset     int32 `db:"offset" json:"offset"`
}

func (q *Queries) ListProductsByCategory(ctx context.Context, arg ListProductsByCategoryParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProductsByCategory, arg.CategoryID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.StockQuantity,
			&i.ImageUrl,
			&i.AverageRating,
			&i.TotalComments,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductStock = `-- name: UpdateProductStock :one
UPDATE products
SET stock_quantity = $2,
    updated_at = NOW()
WHERE id = $1
RETURNING id, category_id, name, description, price, stock_quantity, image_url,
          average_rating, total_comments, created_at, updated_at
`

type UpdateProductStockParams struct {
	ID            int32 `db:"id" json:"id"`
	StockQuantity int32 `db:"stock_quantity" json:"stock_quantity"`
}

func (q *Queries) UpdateProductStock(ctx context.Context, arg UpdateProductStockParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProductStock, arg.ID, arg.StockQuantity)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.StockQuantity,
		&i.ImageUrl,
		&i.AverageRating,
		&i.TotalComments,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
