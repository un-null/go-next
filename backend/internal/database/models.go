// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package database

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type OrderStatus string

const (
	OrderStatusPending   OrderStatus = "pending"
	OrderStatusCompleted OrderStatus = "completed"
	OrderStatusCancelled OrderStatus = "cancelled"
	OrderStatusRefunded  OrderStatus = "refunded"
)

func (e *OrderStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderStatus(s)
	case string:
		*e = OrderStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderStatus: %T", src)
	}
	return nil
}

type NullOrderStatus struct {
	OrderStatus OrderStatus `json:"order_status"`
	Valid       bool        `json:"valid"` // Valid is true if OrderStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrderStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderStatus), nil
}

type TransactionType string

const (
	TransactionTypeCharge   TransactionType = "charge"
	TransactionTypePurchase TransactionType = "purchase"
	TransactionTypeRefund   TransactionType = "refund"
)

func (e *TransactionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionType(s)
	case string:
		*e = TransactionType(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionType: %T", src)
	}
	return nil
}

type NullTransactionType struct {
	TransactionType TransactionType `json:"transaction_type"`
	Valid           bool            `json:"valid"` // Valid is true if TransactionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionType) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionType), nil
}

type CartItem struct {
	ID        int32              `db:"id" json:"id"`
	UserID    pgtype.UUID        `db:"user_id" json:"user_id"`
	ProductID int32              `db:"product_id" json:"product_id"`
	Quantity  int32              `db:"quantity" json:"quantity"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type Category struct {
	ID          int32              `db:"id" json:"id"`
	Name        string             `db:"name" json:"name"`
	Description pgtype.Text        `db:"description" json:"description"`
	ImageUrl    pgtype.Text        `db:"image_url" json:"image_url"`
	IsActive    pgtype.Bool        `db:"is_active" json:"is_active"`
	SortOrder   pgtype.Int4        `db:"sort_order" json:"sort_order"`
	CreatedAt   pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type CoinTransaction struct {
	ID              int32              `db:"id" json:"id"`
	UserID          pgtype.UUID        `db:"user_id" json:"user_id"`
	TransactionType TransactionType    `db:"transaction_type" json:"transaction_type"`
	Amount          int32              `db:"amount" json:"amount"`
	BalanceAfter    int32              `db:"balance_after" json:"balance_after"`
	OrderID         pgtype.Int4        `db:"order_id" json:"order_id"`
	Description     pgtype.Text        `db:"description" json:"description"`
	CreatedAt       pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

type Comment struct {
	ID        int32              `db:"id" json:"id"`
	UserID    pgtype.UUID        `db:"user_id" json:"user_id"`
	ProductID int32              `db:"product_id" json:"product_id"`
	Rating    pgtype.Int4        `db:"rating" json:"rating"`
	Comment   string             `db:"comment" json:"comment"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type Order struct {
	ID             int32              `db:"id" json:"id"`
	UserID         pgtype.UUID        `db:"user_id" json:"user_id"`
	OrderNumber    string             `db:"order_number" json:"order_number"`
	TotalAmount    pgtype.Numeric     `db:"total_amount" json:"total_amount"`
	TotalCoinsUsed int32              `db:"total_coins_used" json:"total_coins_used"`
	Status         NullOrderStatus    `db:"status" json:"status"`
	CreatedAt      pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type OrderItem struct {
	ID           int32          `db:"id" json:"id"`
	OrderID      int32          `db:"order_id" json:"order_id"`
	ProductID    int32          `db:"product_id" json:"product_id"`
	ProductName  string         `db:"product_name" json:"product_name"`
	ProductPrice pgtype.Numeric `db:"product_price" json:"product_price"`
	Quantity     int32          `db:"quantity" json:"quantity"`
	Subtotal     pgtype.Numeric `db:"subtotal" json:"subtotal"`
}

type Product struct {
	ID            int32              `db:"id" json:"id"`
	CategoryID    int32              `db:"category_id" json:"category_id"`
	Name          string             `db:"name" json:"name"`
	Description   pgtype.Text        `db:"description" json:"description"`
	Price         pgtype.Numeric     `db:"price" json:"price"`
	StockQuantity int32              `db:"stock_quantity" json:"stock_quantity"`
	ImageUrl      pgtype.Text        `db:"image_url" json:"image_url"`
	AverageRating pgtype.Numeric     `db:"average_rating" json:"average_rating"`
	TotalComments pgtype.Int4        `db:"total_comments" json:"total_comments"`
	CreatedAt     pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type User struct {
	ID           pgtype.UUID        `db:"id" json:"id"`
	Name         string             `db:"name" json:"name"`
	Email        string             `db:"email" json:"email"`
	PasswordHash string             `db:"password_hash" json:"password_hash"`
	Coins        pgtype.Int4        `db:"coins" json:"coins"`
	CreatedAt    pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}
