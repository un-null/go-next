// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: coin_transactions.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCoinTransaction = `-- name: CreateCoinTransaction :one
INSERT INTO coin_transactions (user_id, transaction_type, amount, balance_after, order_id, description)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, transaction_type, amount, balance_after, order_id, description, created_at
`

type CreateCoinTransactionParams struct {
	UserID          pgtype.UUID     `db:"user_id" json:"user_id"`
	TransactionType TransactionType `db:"transaction_type" json:"transaction_type"`
	Amount          int32           `db:"amount" json:"amount"`
	BalanceAfter    int32           `db:"balance_after" json:"balance_after"`
	OrderID         pgtype.Int4     `db:"order_id" json:"order_id"`
	Description     pgtype.Text     `db:"description" json:"description"`
}

func (q *Queries) CreateCoinTransaction(ctx context.Context, arg CreateCoinTransactionParams) (CoinTransaction, error) {
	row := q.db.QueryRow(ctx, createCoinTransaction,
		arg.UserID,
		arg.TransactionType,
		arg.Amount,
		arg.BalanceAfter,
		arg.OrderID,
		arg.Description,
	)
	var i CoinTransaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TransactionType,
		&i.Amount,
		&i.BalanceAfter,
		&i.OrderID,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const getCoinTransactionByID = `-- name: GetCoinTransactionByID :one
SELECT id, user_id, transaction_type, amount, balance_after, order_id, description, created_at
FROM coin_transactions
WHERE id = $1
`

func (q *Queries) GetCoinTransactionByID(ctx context.Context, id int32) (CoinTransaction, error) {
	row := q.db.QueryRow(ctx, getCoinTransactionByID, id)
	var i CoinTransaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TransactionType,
		&i.Amount,
		&i.BalanceAfter,
		&i.OrderID,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const getCoinTransactionsByUserID = `-- name: GetCoinTransactionsByUserID :many
SELECT id, user_id, transaction_type, amount, balance_after, order_id, description, created_at
FROM coin_transactions
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetCoinTransactionsByUserIDParams struct {
	UserID pgtype.UUID `db:"user_id" json:"user_id"`
	Limit  int32       `db:"limit" json:"limit"`
	Offset int32       `db:"offset" json:"offset"`
}

func (q *Queries) GetCoinTransactionsByUserID(ctx context.Context, arg GetCoinTransactionsByUserIDParams) ([]CoinTransaction, error) {
	rows, err := q.db.Query(ctx, getCoinTransactionsByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CoinTransaction
	for rows.Next() {
		var i CoinTransaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TransactionType,
			&i.Amount,
			&i.BalanceAfter,
			&i.OrderID,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
