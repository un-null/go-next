// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, email, password_hash, coins)
VALUES ($1, $2, $3, $4)
RETURNING id, name, email, coins, created_at, updated_at
`

type CreateUserParams struct {
	Name         string      `db:"name" json:"name"`
	Email        string      `db:"email" json:"email"`
	PasswordHash string      `db:"password_hash" json:"password_hash"`
	Coins        pgtype.Int4 `db:"coins" json:"coins"`
}

type CreateUserRow struct {
	ID        pgtype.UUID        `db:"id" json:"id"`
	Name      string             `db:"name" json:"name"`
	Email     string             `db:"email" json:"email"`
	Coins     pgtype.Int4        `db:"coins" json:"coins"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
		arg.Coins,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Coins,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
