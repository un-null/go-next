// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: cart_items.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkCartItemExists = `-- name: CheckCartItemExists :one
SELECT EXISTS(SELECT 1 FROM cart_items WHERE user_id = $1 AND product_id = $2)
`

type CheckCartItemExistsParams struct {
	UserID    pgtype.UUID `db:"user_id" json:"user_id"`
	ProductID int32       `db:"product_id" json:"product_id"`
}

func (q *Queries) CheckCartItemExists(ctx context.Context, arg CheckCartItemExistsParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkCartItemExists, arg.UserID, arg.ProductID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createCartItem = `-- name: CreateCartItem :one
INSERT INTO cart_items (user_id, product_id, quantity, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, product_id, quantity, created_at, updated_at
`

type CreateCartItemParams struct {
	UserID    pgtype.UUID        `db:"user_id" json:"user_id"`
	ProductID int32              `db:"product_id" json:"product_id"`
	Quantity  int32              `db:"quantity" json:"quantity"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

func (q *Queries) CreateCartItem(ctx context.Context, arg CreateCartItemParams) (CartItem, error) {
	row := q.db.QueryRow(ctx, createCartItem,
		arg.UserID,
		arg.ProductID,
		arg.Quantity,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAllCartItemsByUser = `-- name: DeleteAllCartItemsByUser :exec
DELETE FROM cart_items
WHERE user_id = $1
`

func (q *Queries) DeleteAllCartItemsByUser(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteAllCartItemsByUser, userID)
	return err
}

const deleteCartItem = `-- name: DeleteCartItem :exec
DELETE FROM cart_items
WHERE user_id = $1 AND product_id = $2
`

type DeleteCartItemParams struct {
	UserID    pgtype.UUID `db:"user_id" json:"user_id"`
	ProductID int32       `db:"product_id" json:"product_id"`
}

func (q *Queries) DeleteCartItem(ctx context.Context, arg DeleteCartItemParams) error {
	_, err := q.db.Exec(ctx, deleteCartItem, arg.UserID, arg.ProductID)
	return err
}

const getCartItemsByUser = `-- name: GetCartItemsByUser :many
SELECT id, user_id, product_id, quantity, created_at, updated_at
FROM cart_items
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetCartItemsByUser(ctx context.Context, userID pgtype.UUID) ([]CartItem, error) {
	rows, err := q.db.Query(ctx, getCartItemsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CartItem
	for rows.Next() {
		var i CartItem
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProductID,
			&i.Quantity,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCartItemQuantity = `-- name: UpdateCartItemQuantity :one
UPDATE cart_items
SET 
    quantity = $3,
    updated_at = $4
WHERE user_id = $1 AND product_id = $2
RETURNING id, user_id, product_id, quantity, created_at, updated_at
`

type UpdateCartItemQuantityParams struct {
	UserID    pgtype.UUID        `db:"user_id" json:"user_id"`
	ProductID int32              `db:"product_id" json:"product_id"`
	Quantity  int32              `db:"quantity" json:"quantity"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdateCartItemQuantity(ctx context.Context, arg UpdateCartItemQuantityParams) (CartItem, error) {
	row := q.db.QueryRow(ctx, updateCartItemQuantity,
		arg.UserID,
		arg.ProductID,
		arg.Quantity,
		arg.UpdatedAt,
	)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
